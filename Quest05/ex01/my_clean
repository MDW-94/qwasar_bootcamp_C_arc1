command line that will search for all files in the current directory as well as in it directories - with a name ending by ~, or a name that starts and ends with #

The command line will print and delete all files found
Only one command is allowed: no ; or && or other trickeries

dig into the command line 'find' - man finefind 

find . -type f -or -type d
- Find all files and directories in the current directory

find . -type f -name *~* -or - type d
- Find all files with "~" in the name and all directories in current directory


find . -name *~* -or -name *#* ?? incorrect


find . -type f \( -name '*~' -o -name '#*#' \)


'find' : the command used to search for files/directories
'.' : Specifies the starting directory for the search (current directory)
' -type f' : specifies that we're only interested in files, not directories
'\( ...\ )' : Groups expressions together
`-name '*~'` : Specifies files whose names end with '~'
'-o' : Logical OR operator
`-name '#*#'` : Specifies files whose names start and end with '#'

find . -type f \( -name '*~*' -o -name '*#*' \)

Same thing again but files that include both characters

find . -type f ! -name '*.sh'


---------


find . -type f -name "*.sh" -exec basename {} .sh \;

`find .` : Beings the search in the current directory and its subdirectories

`-type f` : Specifies that we're only interested in files, not directories

`-name "*.sh"` : Filters the files to include only those ending with '.sh'

`-exec basename {} .sh \;` : Executes the 'basename' command on each found file to remove the directory path and the `.sh` extension, leaving only the filename without the extension

This command will display the names of all files ending with `.sh` in the current directory and its subdirectories, without the '.sh' extension


The `-exec` option in the `find` command allows you to execute a specified command on the files that match search criteria. IT is followed by the command you want to execute and a semicolon ';' or a plus sign '+'

-exec command () \;

'command' : The command you want to execute on each mathed file. It can be any valid shell command

'{}' : This placeholder gets eplaced by the path of each matched file

'\;' The semicolon indicates the end of the command. Each matched file is processed sequentially 


In what we've been discussing:

find . -type f -name *.sh -exec basename{} .sh\;

The `basename {} .sh` command is executed for each file found by `find`. It removes the directory path and the `,sh` extension from each file's name, leaving only the base filename without the extension


Pt. 1
find . -type f -name *.sh

- retrieve all files in the current directory which include '.sh' at the end of their name (the file extension)

Pt.2
'-exec'

- on the found files execute the following command:

Pt.3
'basename {} .sh'

- basename removes a specified input from the retrieved file - the '{}' is a placeholder for ALL files - the '.sh' means remove the '.sh' from all the files

Pt.4
'\;'

- this ends the command




