find . -type f -name "*.sh" -exec basename {} .sh \;

Write a command line that searches for all file names that end with ".sh" (without quotation marks) in the current directory and all its sub-directories. It should display only the name of files without the extension .sh.

Tips
You should dig into the command find (man find) specially the -exec option
You should dig into the command basename
You should dig into the command rev (man rev)
You should dig into the command cut (man cut)
You should dig into the command sed (man sed)



     -exec utility [argument ...] ;
             True if the program named utility returns a zero value as its
             exit status.  Optional arguments may be passed to the utility.
             The expression must be terminated by a semicolon (“;”).  If you
             invoke find from a shell you may need to quote the semicolon if
             the shell would otherwise treat it as a control operator.  If the
             string “{}” appears anywhere in the utility name or the arguments
             it is replaced by the pathname of the current file.  Utility will
             be executed from the directory from which find was executed.
             Utility and arguments are not subject to the further expansion of
             shell patterns and constructs.

     -exec utility [argument ...] {} +
             Same as -exec, except that “{}” is replaced with as many
             pathnames as possible for each invocation of utility.  This
             behaviour is similar to that of xargs(1).  The primary always
             returns true; if at least one invocation of utility returns a
             non-zero exit status, find will return a non-zero exit status.

find . -type f -name "*.sh" -exec basename {} .sh \;

`find .` : Beings the search in the current directory and its subdirectories

`-type f` : Specifies that we're only interested in files, not directories

`-name "*.sh"` : Filters the files to include only those ending with '.sh'

`-exec basename {} .sh \;` : Executes the 'basename' command on each found file to remove the directory path and the `.sh` extension, leaving only the filename without the extension

This command will display the names of all files ending with `.sh` in the current directory and its subdirectories, without the '.sh' extension


The `-exec` option in the `find` command allows you to execute a specified command on the files that match search criteria. IT is followed by the command you want to execute and a semicolon ';' or a plus sign '+'

-exec command () \;

'command' : The command you want to execute on each mathed file. It can be any valid shell command

'{}' : This placeholder gets eplaced by the path of each matched file

'\;' The semicolon indicates the end of the command. Each matched file is processed sequentially 


In what we've been discussing:

find . -type f -name *.sh -exec basename{} .sh\;

The `basename {} .sh` command is executed for each file found by `find`. It removes the directory path and the `,sh` extension from each file's name, leaving only the base filename without the extension


Pt. 1
find . -type f -name *.sh

- retrieve all files in the current directory which include '.sh' at the end of their name (the file extension)

Pt.2
'-exec'

- on the found files execute the following command:

Pt.3
'basename {} .sh'

- basename removes a specified input from the retrieved file - the '{}' is a placeholder for ALL files - the '.sh' means remove the '.sh' from all the files

Pt.4
'\;'

- this ends the command






